<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars
baseurl = ""
isLoading = false;
reqtype = -99; // put table, get table etc, numbers
webrequest = -99; // event ids from GM
lastTableHash = "";

dialogid = -99;

// saving as user
lastUsername = "default"
lastRequestedId = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// load config
if(file_exists("webconf.ini"))
{
    ini_open("webconf.ini")
    baseurl = ini_read_string("websvc","url","http://reflectionlink.herokuapp.com/")
    ini_close()
}

if(DEBUG_CONFIG == 1)
{
    baseurl = "http://localhost:5000/"
}

ico_main = hobbl_com_resource_loadicon("favicon.ico")


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// get table
if(!isLoading)
{
    print("request table")
    reqtype = HTTP_REQ_TABLE_HASH
    var reqid = lastRequestedId
    http_get(baseurl+"table/hash/"+reqid)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update online content
if(!isLoading)
{
    print("Now busy!")
    var jstr = scr_tableToJstring();

    reqtype = WEB_PUT_TABLE_HASH; // because GMs event id doesnt work
    isLoading = true
    
    var jhash = sha1_string_unicode(jstr)
    var jstring = jstr;
    var username = lastUsername;
    // also save the hash for link
    lastTableHash = jhash;
    
    /*
    var content = "hash="+string(maphash)+"&amp;songname="+string(songname)+"&amp;songartist="+string(songartist)+"&amp;score="+string(playerscore)+"&amp;playername="+string(playername)
    webrequest = http_post_string("http://localhost:3000/Scores",content)
    */
    
    
    var putMap = ds_map_create();
    ds_map_add(putMap,"username", username)
    ds_map_add(putMap, "jhash", jhash)
    ds_map_add(putMap, "jstring", jstring)

    
    var putString = json_encode(putMap)
    ds_map_destroy(putMap)
    
    var headerMap = ds_map_create()
    ds_map_add(headerMap, "Content-Type","application/json")
    
    http_request(baseurl+"table/hash/"+jhash,"PUT",headerMap,putString)
    
    ds_map_destroy(headerMap)
    
    print("req sent")
}
else
{
    print("still busy...")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(async_load[?"id"] &lt; 0)
{
    show_message_async("Could not connect to online service.#Is the device connected to internet?#Err: HTTP_ASYNC_ID_NULL")
    exit;
}

if(json_decode(async_load[?"result"]) == -1)
{
    show_message_async("Could not connect to online service.#Err: HTTP_ASYNC_ID_NEGATIVE")
    exit;
}

switch(reqtype)
{
    case WEB_PUT_TABLE_HASH: // PUT Table
        //if ds_map_find_value(async_load, "id") == webrequest // Request info
        {
            if ds_map_find_value(async_load, "status") == 0
           {
               r_str = ds_map_find_value(async_load, "result");
               var respMap = json_decode(r_str);
               
               if(ds_map_exists(respMap,"message"))
               {
                show_message_async("Could not upload data.#Unknown error:#DS_MAP_EXISTS_RESPMAP_MESSAGE")
               }
               else
               {
                //show_message_async("Successfully uploaded to server")
                //var sharelink = str(baseurl) + "/table/hash/"+lastTableHash; // unused
                    
                var labely = 10;
     
                
                hwnd_share = hobbl_com_window_create(0, window_get_x(), window_get_y(), 500, 200, api_ws_visible | api_ws_caption | api_ws_sysmenu, api_ws_ex_topmost);
                hobbl_com_window_settext(hwnd_share, "Share link")
                hobbl_com_window_seticon(hwnd_share, ico_main)
                
                pathLabel = hobbl_com_edit_create(hwnd_share, 5, labely, 490, 20, api_es_left | api_es_readonly, 0);
                hobbl_com_edit_setsel(pathLabel, 0,0);
                hobbl_com_edit_replaceselection(pathLabel, 0, "Share this ID with others! It will NOT be shown again after closing this window!");

                labely += 40;
                pathLabel = hobbl_com_edit_create(hwnd_share, 5, labely, 490, 20, api_es_left | api_es_readonly, 0);
                hobbl_com_edit_setsel(pathLabel, 0,0);
                hobbl_com_edit_replaceselection(pathLabel, 0, "Other people can download your table with this ID:");
                
                labely += 40;
                pathLabel = hobbl_com_edit_create(hwnd_share, 5, labely, 490, 20, api_es_left | api_es_readonly, 0);
                hobbl_com_edit_setsel(pathLabel, 0,0);
                hobbl_com_edit_replaceselection(pathLabel, 0, lastTableHash);
                

                    
               }
               
               if(respMap != undefined)
               {
                ds_map_destroy(respMap)
               }
               isLoading = false
           }
        }
    break;
    
    case HTTP_REQ_TABLE_HASH:
    
    if ds_map_find_value(async_load, "status") == 0
    {
        r_str = ds_map_find_value(async_load, "result");
        
        var respMap = json_decode(r_str);
        var respList = respMap[?"default"];
        
        print(r_str);
        
        var tablemap = respList[|0];
        
        print(tablemap[?"jstring"]);
        
        scr_jstringToTable(tablemap[?"jstring"]);
        
        ds_map_destroy(tablemap);
        ds_list_destroy(respList);
        ds_map_destroy(respMap);
    }
    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
